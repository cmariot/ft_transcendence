user				nginx;
worker_processes	auto;

error_log			/var/log/nginx/error.log notice;
pid					/var/run/nginx.pid;

events
{
	worker_connections	1024;
}

http
{

	include					/etc/nginx/mime.types;
	default_type			application/octet-stream;
	log_format	main		'$remote_addr - $remote_user [$time_local] "$request" '
							'$status $body_bytes_sent "$http_referer" '
							'"$http_user_agent" "$http_x_forwarded_for"';
	access_log				/var/log/nginx/access.log  main;
	sendfile				on;
	keepalive_timeout		65;

	upstream frontend
	{
		server frontend:4000;
	}

	upstream backend
	{
		server backend:3000;
	}

	upstream sockets
	{
    	server backend:3001;
	}

	server
	{
		listen					8443 ssl;
		server_name				mbp.local;
		default_type			application/json;
		client_max_body_size	10M;

		# TLS Configuration
		ssl_protocols			TLSv1.2 TLSv1.3;
		ssl_certificate			/ssl/localhost.crt;
		ssl_certificate_key		/ssl/localhost.key;

		# Frontend
		location /
		{
			proxy_http_version	1.1;

			proxy_set_header	Host $host;
        	proxy_set_header 	Upgrade $http_upgrade;
        	proxy_set_header 	Connection "upgrade";

			proxy_pass http://frontend$request_uri;
		}

		# Backend
		location /api/
		{
			# A faire en prod :
			# - Bloquer toutes les requetes sur backend, sauf celles provenant de notre IP
			#   (Cela evite tout acces direct au backend)

			proxy_http_version	1.1;

			proxy_set_header	Host $host;
        	proxy_set_header 	Upgrade $http_upgrade;
        	proxy_set_header 	Connection "upgrade";

			proxy_pass http://backend/;
		}
   		
		# Socket.io
		location /socket.io/ {
			proxy_http_version 1.1;

			proxy_set_header	Host $host;
    		proxy_set_header	X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header	Upgrade $http_upgrade;
			proxy_set_header	Connection "upgrade";
			
			proxy_pass http://sockets;
		}

	}
}